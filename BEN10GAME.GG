--// Rayfield Loader
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

--// Window
local Window = Rayfield:CreateWindow({
	Name = "Alien League Revival",
	LoadingTitle = "Shadow hub",
	LoadingSubtitle = "by ShadowDragonZ",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = "AlienMenu",
		FileName = "Settings"
	}
})

local Tab = Window:CreateTab("Main", 4483362458)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local AliensFolder = ReplicatedStorage:WaitForChild("Aliens")

----------------------------------------------------------------
-- üß© L·∫•y danh s√°ch Model
----------------------------------------------------------------
local function getAllModels()
	local list = {}
	for _, subFolder in ipairs(AliensFolder:GetChildren()) do
		if subFolder:IsA("Folder") then
			for _, obj in ipairs(subFolder:GetChildren()) do
				if obj:IsA("Model") then
					table.insert(list, subFolder.Name .. "/" .. obj.Name)
				end
			end
		end
	end
	if #list == 0 then
		table.insert(list, "‚ö†Ô∏èNo model found!")
	end
	return list
end

local allModels = getAllModels()
local selectedModelPath = nil
local dropdownRef
local ignoreCallback = false
local currentSearch = ""

----------------------------------------------------------------
-- üß© H√†m l·ªçc danh s√°ch theo t·ª´ kh√≥a
----------------------------------------------------------------
local function filterModels(keyword)
	if keyword == "" then return allModels end
	local filtered = {}
	for _, name in ipairs(allModels) do
		if string.find(string.lower(name), string.lower(keyword)) then
			table.insert(filtered, name)
		end
	end
	if #filtered == 0 then
		table.insert(filtered, "‚ö†Ô∏èNo matching results found!")
	end
	return filtered
end

----------------------------------------------------------------
-- üß© Textbox t√¨m ki·∫øm nhanh
----------------------------------------------------------------
Tab:CreateInput({
	Name = "üîçsearch (error)",
	PlaceholderText = "error'",
	RemoveTextAfterFocusLost = false,
	Callback = function(keyword)
		currentSearch = keyword or ""
		local newList = filterModels(currentSearch)
		ignoreCallback = true
		pcall(function()
			dropdownRef:Set(newList)
		end)
		ignoreCallback = false
	end
})

----------------------------------------------------------------
-- üß© Dropdown ch·ªçn Model
----------------------------------------------------------------
dropdownRef = Tab:CreateDropdown({
	Name = "üìú Select(Alien)",
	Options = allModels,
	CurrentOption = nil,
	Flag = "AlienDropdown",
	Callback = function(option)
		if ignoreCallback then return end

		-- Rayfield m·ªõi tr·∫£ v·ªÅ b·∫£ng ‚Üí ch·ªâ l·∫•y chu·ªói ƒë·∫ßu
		if typeof(option) == "table" then
			option = option[1]
		end

		if type(option) ~= "string" or option:find("‚ö†Ô∏è") then
			selectedModelPath = nil
			return
		end

		selectedModelPath = option
		Rayfield:Notify({
			Title = "Selected Alien",
			Content = "Model: " .. option,
			Duration = 3
		})
	end
})

----------------------------------------------------------------
-- üß© N√∫t l√†m m·ªõi to√†n b·ªô danh s√°ch
----------------------------------------------------------------
Tab:CreateButton({
	Name = "üîÑRefresh list",
	Callback = function()
		allModels = getAllModels()
		local newList = filterModels(currentSearch)
		ignoreCallback = true
		pcall(function()
			dropdownRef:Set(newList)
		end)
		ignoreCallback = false
		Rayfield:Notify({
			Title = "Update Success!",
			Content = "List Update.",
			Duration = 3
		})
	end
})

----------------------------------------------------------------
-- üß© L·∫•y Model Instance t·ª´ "Folder/Model"
----------------------------------------------------------------
local function getModelFromPath(path)
	local parts = string.split(path, "/")
	if #parts ~= 2 then return nil end
	local folder = AliensFolder:FindFirstChild(parts[1])
	if not folder then return nil end
	return folder:FindFirstChild(parts[2])
end

----------------------------------------------------------------
-- üß© N√∫t Bi·∫øn h√¨nh
----------------------------------------------------------------
Tab:CreateButton({
	Name = "üõ∏Transformation!",
	Callback = function()
		if not selectedModelPath then
			Rayfield:Notify({
				Title = "Error",
				Content = "You have not selected a Model!",
				Duration = 3
			})
			return
		end

		local model = getModelFromPath(selectedModelPath)
		if not model then
			Rayfield:Notify({
				Title = "Error",
				Content = selectedModelPath .. "Error!",
				Duration = 3
			})
			return
		end

		local args = { model }
		local ok, err = pcall(function()
			ReplicatedStorage:WaitForChild("ChangeChar"):FireServer(unpack(args))
		end)

		if ok then
			Rayfield:Notify({
				Title = "‚úÖSuccess!",
				Content = "Transformed into " .. selectedModelPath,
				Duration = 4
			})
		else
			warn("FireServer l·ªói:", err)
			Rayfield:Notify({
				Title = "‚ùå Error FireServer",
				Content = "Error!",
				Duration = 4
			})
		end
	end
})